<!---<cfquery name="GetListing" datasource="#request.dsn#">
	DELETE 
	FROM public_notices
</cfquery>  

44-187

<cfabort>--->


<cfhttp method="POST" url="http://www.njpublicnotices.com/Search.aspx">
	<cfhttpparam type="FORMFIELD"  name="ctl00$ToolkitScriptManager1" value="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$updateWSGrid|ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl01$btnNext" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$QuickSearchForm1$txtSearch" value="self storage facility act" />
	<cfhttpparam type="FORMFIELD"  name="ctl00_ToolkitScriptManager1_HiddenField" value="" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$QuickSearchForm1$ddlPopularSearches" value="0" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$as1$txtSearch" value="self storage facility act" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$as1$rdoType" value="AND" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$as1$txtExclude" value="" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$as1$hdnLastScrollPos" value="0" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$as1$hdnCountyScrollPosition" value="##ctl00_ContentPlaceHolder1_as1_lstCounty_7" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$as1$hdnCityScrollPosition" value="-1" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$as1$hdnPubScrollPosition" value="-1" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$as1$hdnField" value="" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$as1$lstCounty$0" value="on" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$as1$lstCounty$2" value="on" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$as1$lstCounty$3" value="on" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$as1$lstCounty$5" value="on" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$as1$lstCounty$7" value="on" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$as1$dateRange" value="rbRange" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$as1$txtDateFrom" value="11/26/2015" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$as1$txtDateTo" value="1/26/2016" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$as1$txtLastNumDays" value="365" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$as1$txtLastNumWeeks" value="52" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$as1$txtLastNumMonths" value="12" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$as1$txtSSID" value="0" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl01$ddlSortBy" value="DatePublishedDate DESC" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl01$ddlPerPage" value="50" />
	<cfhttpparam type="FORMFIELD"  name="__EVENTTARGET" value="" />
	<cfhttpparam type="FORMFIELD"  name="__EVENTARGUMENT" value="" />
	<cfhttpparam type="FORMFIELD"  name="__LASTFOCUS" value="" />
	<cfhttpparam type="FORMFIELD"  name="__VIEWSTATE" value="" />
	<cfhttpparam type="FORMFIELD"  name="__VIEWSTATEGENERATOR" value="BBBC20B8" />
	<cfhttpparam type="FORMFIELD"  name="__ASYNCPOST" value="true" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl01$btnNext.x" value="6" />
	<cfhttpparam type="FORMFIELD"  name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl01$btnNext.y" value="3" />
</cfhttp>

<cfdump var="#cfhttp.filecontent#" />



<cfabort>
<cfhttp method="POST" url="http://www.publicnoticeads.com/NJ/search/results.asp?T=PN">
	<cfhttpparam type="FORMFIELD" name="lstcounties" value="Atlantic,Burlington,Camden,Cumberland,Gloucester" />
	<cfhttpparam type="FORMFIELD" name="LSTPUBLICATIONS" value="All" />
	<cfhttpparam type="FORMFIELD" name="SELECTNUMNOTICES" value="250" />
	<cfhttpparam type="FORMFIELD" name="TXTDATEFROM" value="" />
	<cfhttpparam type="FORMFIELD" name="TXTDATETO" value="" />
	<cfhttpparam type="FORMFIELD" name="TXTSEARCHWORDSAND" value="Self Storage Facility Act" />
	<cfhttpparam type="FORMFIELD" name="TXTSEARCHWORDSEXACT" value="" />
	<cfhttpparam type="FORMFIELD" name="TXTSEARCHWORDSNOT" value="" />					
	<cfhttpparam type="FORMFIELD" name="TXTSEARCHWORDSOR" value="" />
</cfhttp>

<cfdump var="#cfhttp.filecontent#" />


<cffile action="write" file="#ExpandPath("./pn.htm")#" output="#cfhttp.filecontent#">

<cfset html = cfhttp.filecontent /> 

<cffile action="read" file="#ExpandPath("./pn.htm")#" variable="html" />

<cfset month_list ="January|February|March|April|May|June|July|August|September|October|November|December" />

<cfset linkArray = reMatch("'view.*?'",html) />

<cfset counter = 1 />

<cfloop array="#linkArray#" index="myItem">

	<cfset myItem = Replace(myItem,"'","","ALL") />

	<cfset Attributes.guid = ListGetAt(myItem,3,"=") />
	
	<cfoutput>#Attributes.guid#<br /></cfoutput>
	
	<cfquery name="CheckItem" datasource="#request.dsn#">
		SELECT noticeid
		FROM public_notices
		WHERE njpa_noticeid = <cfqueryparam cfsqltype="CF_SQL_VARCHAR" value="#Attributes.guid#" />
	</cfquery>

	<cfif CheckItem.recordcount EQ 0>
		<cfset Attributes.county = "" />
		<cfset Attributes.paper = "" />
		<cfset Attributes.published_date = "" />
		<cfset Attributes.sale_date = "" />
		<cfset Attributes.message_detail = "" />
	
		<!--- Grab Record / Insert new record---->
		
		
		<cfhttp method="get" url="http://www.publicnoticeads.com/NJ/search/view.asp?T=PN&id=#Attributes.guid#"></cfhttp>
	
		<cfset write_html = Replace(cfhttp.filecontent,"&##47;","/","ALL") />
	
		<cffile action="write" file="#ExpandPath("./listing_cache/listing_#DateFormat(Now(),'yyyymmdd')#_#counter#.htm")#" output="#write_html#">
	
		<cfset listing_html = cfhttp.filecontent />

		
		<!--- <cffile action="read" file="#ExpandPath("./listing.htm")#" variable="listing_html" /> --->
		
		<cfset listing_html = Replace(listing_html,"#chr(13)##chr(10)#","","ALL") />
		<cfset listing_html = Replace(listing_html,"&##58;",":","ALL") />
		<cfset listing_html = Replace(listing_html,":00:00",":00","ALL") />
		<cfset listing_html = Replace(listing_html,"&##47;","/","ALL") />
		<cfset listing_html = ReplaceNoCase(listing_html,"o'clock ","","ALL") />
		<cfset listing_html = ReplaceNoCase(listing_html,"a.m.","am","ALL") />
		<cfset listing_html = ReplaceNoCase(listing_html,"p.m.","pm","ALL") />
		<cfset listing_html = ReplaceNoCase(listing_html,"day ","","ALL") />		
		
		<cfset pubArray = reMatch('<[dD][iI][vV].*?>.*?</[dD][iI][vV]>',listing_html) />

		<cfdump var="#pubArray#">
		
		<cfloop array="#pubArray#" index="myPub">
		
			<cfset pubItem = myPub />
			
			<!--- <cfoutput>#pubItem#<br /></cfoutput> --->
			
			<cfif FindNoCase('id="publicationInfo"',pubItem)>
				<cfset pubInfoArray = reMatch('</b>.*?</font>',pubItem) />
				
				<cfloop index="x" from="1" to="#ArrayLen(pubInfoArray)#">
					<cfset pubInfoItem = reReplace(pubInfoArray[x],"<.*?>","","ALL") />
					<cfif x EQ 1>
						<cfset Attributes.county = pubInfoItem />
					<cfelseif x EQ 2>
						<cfset Attributes.paper = pubInfoItem />					
					<cfelseif x EQ 3>
						<cfset Attributes.published_date = pubInfoItem />					
					</cfif>
				</cfloop>

			<cfelseif FindNoCase('id="NoticeText"',pubItem)>
				<!--- date formats
					19th of July 
					July 7, 2011
					June 25, 2011
					28th day of June 2011 
				--->
				<cfset dateArray = reMatch('[0-9]{1,2}(rd|st|th|nd) of (#month_list#)',pubItem) />

				<cfif ArrayLen(dateArray) GT 0>
					<cfset dateString = dateArray[1] />
					<cfset dateString = REReplaceNoCase(dateString,"[rdsth]{2} of","","ALL") />
					<cfset dateString = "#ListGetAt(dateString,2," ")# #ListGetAt(dateString,1," ")#" />
					<cfset dateArray[1] = "#dateString#, 2014" />
				</cfif>

				<cfif ArrayLen(dateArray) EQ 0>
					<cfset dateArray = reMatch('(#month_list#) [0-9]+',pubItem) />
					<cfif ArrayLen(dateArray) GT 0>
						THERE<br />
						<cfset dateString = dateArray[1] />
						<cfset dateArray[1] = "#dateString#, 2014" />
					</cfif>					
				</cfif>

				<cfif ArrayLen(dateArray) EQ 0>
					<cfset dateArray = reMatch('[0-9]{1,2}[dhnrst]{2} of [A-Z]{1}[a-z]+, [0-9]{4}',pubItem) />
					everywHERE<br />
				</cfif>
				<!--- ([0-9]{1,2}[dhnrst]{2} of [A-Z]{1}[a-z]+, [0-9]{4}) --->
				
				
				<cfdump var="#dateArray#">
				
				<cfif ArrayLen(dateArray) GT 0>
					<cfset Attributes.sale_date = dateArray[1] />
				</cfif>
				
				<cfset Attributes.saleArray = reMatch('[0-9]{1,2}:[0-9]{2} [ampAMP]{2}',pubItem) />
				
				
				<cfif ArrayLen(Attributes.saleArray)>
					<cfset Attributes.sale_time = Attributes.saleArray[1] />
				<cfelse>
					<cfset Attributes.saleArray = reMatch('[0-9]{1,2}:[0-9]{2} o''clock [ap]{1}.m.',pubItem) />
					<cfif ArrayLen(Attributes.saleArray)>
						<cfset Attributes.sale_time = Attributes.saleArray[1] />
					<cfelse>
						<cfset Attributes.sale_time = "" />
					</cfif>
				</cfif>
				
				<cfset Attributes.message_detail = pubItem />
			
			<cfelseif FindNoCase('Public Notice ID: ',pubItem)>
			
			</cfif>
			
		
		</cfloop>

		<cfset Attributes.sale_date = Replace(Attributes.sale_date,",","") />

		<cfset Attributes.sale_date = "#ListFind(month_list,ListGetAt(Attributes.sale_date,1," "),"|")#/#ListGetAt(Attributes.sale_date,2," ")#/#ListGetAt(Attributes.sale_date,3," ")#" />

		<cfset Attributes.sale_date = DateFormat(Attributes.sale_date,"yyyy-mm-dd") />
		
		<cfset Attributes.message_detail = Replace(Attributes.message_detail,"�","","ALL") />
		
		<cfdump var="#attributes#">
		
		<!--- <cfoutput>#listing_html#</cfoutput> --->

		<cfquery name="CheckItem" datasource="#request.dsn#">
			SELECT noticeid
			FROM public_notices
			WHERE message_detail = <cfqueryparam cfsqltype="CF_SQL_VARCHAR" value="#deMoronize(Attributes.message_detail)#">
		</cfquery>		
		
		<cfif CheckItem.recordcount EQ 0>		
			<cfquery name="InsertListing" datasource="#request.dsn#">
				INSERT INTO public_notices(county,newspaper,message_detail,sale_date,sale_time,njpa_noticeid,date_printed)
				VALUES
				(
					<cfqueryparam cfsqltype="CF_SQL_VARCHAR" value="#Attributes.county#">,
					<cfqueryparam cfsqltype="CF_SQL_VARCHAR" value="#Attributes.paper#">,
					<cfqueryparam cfsqltype="CF_SQL_VARCHAR" value="#deMoronize(Attributes.message_detail)#">,				
					'#Attributes.sale_date#',	
					<cfqueryparam cfsqltype="CF_SQL_VARCHAR" value="#Attributes.sale_time#">,					
					<cfqueryparam cfsqltype="CF_SQL_VARCHAR" value="#Attributes.guid#">,
					<cfqueryparam cfsqltype="CF_SQL_VARCHAR" value="#Attributes.published_date#">				
				)					
			</cfquery>
		</cfif>


		
	</cfif>
	
	<cfset counter = counter + 1 />
	
	<cfsleep time="1000">
	
</cfloop>

<cfmail to="tigeryan55@gmail.com,flagsplus@gmail.com" subject="Public Notces Run" from="jceci@sixfoottiger.com" type="html">
	
	Public notice script ran
	
</cfmail>


<cfabort>




<!--- <cfhttp method="POST" url="http://www.publicnoticeads.com/NJ/search/results.asp?T=PN">
	<cfhttpparam type="FORMFIELD" name="lstcounties" value="Atlantic,Burlington,Camden,Cumberland,Gloucester" />
	<cfhttpparam type="FORMFIELD" name="LSTPUBLICATIONS" value="All" />
	<cfhttpparam type="FORMFIELD" name="SELECTNUMNOTICES" value="250" />
	<cfhttpparam type="FORMFIELD" name="TXTDATEFROM" value="" />
	<cfhttpparam type="FORMFIELD" name="TXTDATETO" value="" />
	<cfhttpparam type="FORMFIELD" name="TXTSEARCHWORDSAND" value="Self Storage Facility Act" />
	<cfhttpparam type="FORMFIELD" name="TXTSEARCHWORDSEXACT" value="" />
	<cfhttpparam type="FORMFIELD" name="TXTSEARCHWORDSNOT" value="" />					
	<cfhttpparam type="FORMFIELD" name="TXTSEARCHWORDSOR" value="" />
</cfhttp> 

<cffile action="write" file="#ExpandPath("./pn.htm")#" output="#cfhttp.filecontent#">

<cfset html = cfhttp.filecontent /> --->


<cffile action="read" file="#ExpandPath("./pn.htm")#" variable="html" />

<!--- <cfoutput>#cfhttp.filecontent#</cfoutput> --->


<cfset start = FindNoCase('<table border="0" cellPadding="1" cellSpacing="2" width=100%>',html) />
<cfset end = FindNoCase('</table>',html,start) />

<cfset content = Mid(html,start,end-start+8) />

<!--- <cfoutput>#content#</cfoutput> --->

<cfset link_list = hrefsToList(content) />

<!--- <cfoutput>#link_list#</cfoutput>  --->

<cfloop index="x" from="1" to="#ListLen(link_list)#">
	<cfset link = ListGetAt(link_list,x) />
	<cfoutput>#link#<br /></cfoutput>
</cfloop>

<!---
<form method="post" action="http://www.njpublicnotices.com/Search.aspx">
<intput type="hidden" name="ctl00$ToolkitScriptManager1" value="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$updateWSGrid|ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl01$btnNext" />
<intput type="hidden" name="ctl00$QuickSearchForm1$txtSearch" value="self storage facility act" />
<intput type="hidden" name="ctl00_ToolkitScriptManager1_HiddenField" value="" />
<intput type="hidden" name="ctl00$QuickSearchForm1$ddlPopularSearches" value="0" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$as1$txtSearch" value="self storage facility act" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$as1$rdoType" value="AND" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$as1$txtExclude" value="" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$as1$hdnLastScrollPos" value="0" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$as1$hdnCountyScrollPosition" value="#ctl00_ContentPlaceHolder1_as1_lstCounty_7" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$as1$hdnCityScrollPosition" value="-1" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$as1$hdnPubScrollPosition" value="-1" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$as1$hdnField" value="" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$as1$lstCounty$0" value="on" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$as1$lstCounty$2" value="on" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$as1$lstCounty$3" value="on" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$as1$lstCounty$5" value="on" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$as1$lstCounty$7" value="on" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$as1$dateRange" value="rbRange" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$as1$txtDateFrom" value="11/26/2015" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$as1$txtDateTo" value="1/26/2016" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$as1$txtLastNumDays" value="365" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$as1$txtLastNumWeeks" value="52" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$as1$txtLastNumMonths" value="12" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$as1$txtSSID" value="0" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl01$ddlSortBy" value="DatePublishedDate DESC" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl01$ddlPerPage" value="50" />
--->
<!---
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl03$hdnPKValue" value="1125561" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl04$hdnPKValue" value="1124658" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl05$hdnPKValue" value="1124649" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl06$hdnPKValue" value="1124568" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl07$hdnPKValue" value="1114728" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl08$hdnPKValue" value="1113062" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl09$hdnPKValue" value="1111636" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl10$hdnPKValue" value="1105028" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl11$hdnPKValue" value="1104358" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl12$hdnPKValue" value="1097683" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl13$hdnPKValue" value="1097117" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl14$hdnPKValue" value="1086195" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl15$hdnPKValue" value="1084520" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl16$hdnPKValue" value="1074168" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl17$hdnPKValue" value="1050635" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl18$hdnPKValue" value="1048354" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl19$hdnPKValue" value="1045779" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl20$hdnPKValue" value="1037778" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl21$hdnPKValue" value="1037116" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl22$hdnPKValue" value="1032258" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl23$hdnPKValue" value="1030957" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl24$hdnPKValue" value="1024359" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl25$hdnPKValue" value="1023723" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl26$hdnPKValue" value="1020690" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl27$hdnPKValue" value="1019805" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl28$hdnPKValue" value="1019392" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl29$hdnPKValue" value="1019344" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl30$hdnPKValue" value="1019340" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl31$hdnPKValue" value="1019336" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl32$hdnPKValue" value="1019324" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl33$hdnPKValue" value="1010339" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl34$hdnPKValue" value="1008847" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl35$hdnPKValue" value="1008663" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl36$hdnPKValue" value="1001529" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl37$hdnPKValue" value="1001520" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl38$hdnPKValue" value="1000872" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl39$hdnPKValue" value="1000247" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl40$hdnPKValue" value="1000244" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl41$hdnPKValue" value="995603" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl42$hdnPKValue" value="994424" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl43$hdnPKValue" value="994418" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl44$hdnPKValue" value="993948" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl45$hdnPKValue" value="993924" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl46$hdnPKValue" value="993920" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl47$hdnPKValue" value="975777" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl48$hdnPKValue" value="975739" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl49$hdnPKValue" value="974387" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl50$hdnPKValue" value="972126" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl51$hdnPKValue" value="969403" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl52$hdnPKValue" value="969072" />
--->
<!---
<intput type="hidden" name="__EVENTTARGET" value="" />
<intput type="hidden" name="__EVENTARGUMENT" value="" />
<intput type="hidden" name="__LASTFOCUS" value="" />
<intput type="hidden" name="__VIEWSTATE" value="" />
<intput type="hidden" name="__VIEWSTATEGENERATOR" value="BBBC20B8" />
<intput type="hidden" name="__ASYNCPOST" value="true" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl01$btnNext.x" value="6" />
<intput type="hidden" name="ctl00$ContentPlaceHolder1$WSExtendedGridNP1$GridView1$ctl01$btnNext.y" value="3" />

<input type="submit" value="Go" />
</form>
--->

